DI - Dependency Injection notes
Tutorial : http://www.journaldev.com/2394/java-dependency-injection-design-pattern-example-tutorial
 


-- in Bad Design, disavantages are :
1- hard-coded dependency : MyApplication class is responsible to initialize the email service, 
						   and then use it. if we want to switch to some other advanced email service in future, 
						   it will require code changes in MyApplication class. This makes our application hard to extend, 
						   and if email service is used in multiple classes, then that would be even more harder.
2- not extendable 		 : if we want to extend our application to provide additional messaging feature, 
						   such as SMS or Facebook message then we need to write another application for that. 
						   This will involve code changes in application classes and client classes too.
3- hard to test			 : Testing the application will be very difficult since our application is directly creating
						   service instance. There is no way we can mock these objects in out test classes.							   
============================================================================================================



Benefits of Java Dependency Injection
---------------------------------------
Some of the benefits of using Dependency Injection in Java are:

Separation of Concerns
Boilerplate Code reduction in application classes because all work to initialize dependencies is handled by the injector component
Configurable components makes application easily extendable
Unit testing is easy with mock objects
Disadvantages of Java Dependency Injection

Java Dependency injection has some disadvantages too:
------------------------------------------------------

If overused, it can lead to maintenance issues because effect of changes are known at runtime.
Dependency injection in java hides the service class dependencies that can lead to runtime errors that would have been caught at compile time.						    						   
 
============================================================================================================
 
 
One of the best example of setter dependency injection is Struts2 Servlet API Aware interfaces.

Whether to use Constructor based dependency injection or setter based is a design decision and depends on your requirements. For example, if my application can’t work at all without the service class then I would prefer constructor based DI or else I would go for setter method based DI to use it only when it’s really needed.

Dependency Injection in Java is a way to achieve Inversion of control (IoC) in our application by moving objects binding from compile time to runtime. We can achieve IoC through Factory Pattern, Template Method Design Pattern, Strategy Pattern and Service Locator pattern too.

Spring Dependency Injection, Google Guice and Java EE CDI frameworks facilitate the process of dependency injection through use of Java Reflection API and java annotations. All we need is to annotate the field, constructor or setter method and configure them in configuration xml files or classes. 